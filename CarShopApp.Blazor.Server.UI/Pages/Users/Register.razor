@page "/user/register"
@inject IClient httpClient
@inject NavigationManager navManager

<h3>Register New Account</h3>

@if(string.IsNullOrEmpty(message) == false)
{
    <div class="alert alert-danger">
        <p>@message</p>
    </div>
}

<div>
    <EditForm Model="RegistrationModel" OnInvalidSubmit="HandleRegistration">
        <DataAnnotationsValidator/>
        <ValidationSummary/>
        <div class="form-group">
            <label for="email">Email Address</label>
            <InputText class="form-control" @bind-Value="RegistrationModel.Email"/>
            <ValidationMessage For="@(() => RegistrationModel.Email)"/>
        </div>
        <br />
        <div class="form-group">
            <label for="email">Name</label>
            <InputText class="form-control" @bind-Value="RegistrationModel.Name" />
            <ValidationMessage For="@(() => RegistrationModel.Name)" />
        </div>
        <br />
        <div class="form-group">
            <label for="email">Surname</label>
            <InputText class="form-control" @bind-Value="RegistrationModel.Surname" />
            <ValidationMessage For="@(() => RegistrationModel.Surname)" />
        </div>
        <br />
        <div class="form-group">
            <label for="email">Password</label>
            <InputText class="form-control" type="Password" @bind-Value="RegistrationModel.Password" />
            <ValidationMessage For="@(() => RegistrationModel.Password)" />
        </div>
        <br />
        <button type="submit" class="btn btn-primary btn-block">Register</button>

    </EditForm>
</div>

@code {
    UserDto RegistrationModel = new UserDto
        {
            Role = "User"
    };
    string message = string.Empty;
    private async Task HandleRegistration()
    {
        try
        {
            await httpClient.RegisterAsync(RegistrationModel);
            navManager.NavigateTo("/users/login");
        }
        catch(ApiException ex)
        {
            if(ex.StatusCode >= 200 && ex.StatusCode <= 299)
            {
                NavigateToLogin();
            }
            message = ex.Response;
        }
    }
    private void NavigateToLogin()
    {
        navManager.NavigateTo("/users/login");
    }
}