@page "/producers/"
@inject IProducerService prodService
@inject IJSRuntime js
<h3>Index</h3>

@if(response.Success == false)
{
    <div class="alert alert-danger">
        <h4>@response.Message</h4>
    </div>
}
else
{
@if(Producers == null)
{
    <div class="alert alert-info">
        <h4>Loading Data...</h4>
    </div>
}
else
{
    <AuthorizeView Roles="Administrator">
            <a class="btn btn-dark" href="/producers/create"><span class="oi oi-plus" aria-hidden="true"></span>Create</a>
    </AuthorizeView>
    <br/>
    <table class="table table-responsive">
        <thead>
            <tr>
                <th>Name</th>
                <th>Full name</th>
                <th>Info</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach(var producer in Producers)
            {
                <tr>>
                    <td>@producer.Name</td>
                    <td>@producer.FullName</td>
                    <td>
                        <a class="btn btn-primary" href="/producers/details/@producer.Id"><span class="oi oi-question-mark" aria-hidden="true"></span>Details</a>
                        
                        <AuthorizeView Roles="Administrator">
                                <a class="btn btn-warning" href="/producers/edit/update/@producer.Id"><span class="oi oi-pencil" aria-hidden="true"></span>Edit</a>
                                <button class="btn btn-danger" @onclick=@(() => Delete(@producer.Id))><span class="oi oi-delete" aria-hidden="true"></span>Delete</button>
                        </AuthorizeView>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
}
@code {
    private List<ProducerReadOnlyDto> Producers;
    private Response<List<ProducerReadOnlyDto>> response = new() { Success = true };

    protected override async Task OnInitializedAsync()
    {
        response = await prodService.GetProducers();
        if (response.Success)
        {
            Producers = response.Data;
        }
    }
    private async Task Delete(int producerId)
    {
        var producer = Producers.First(i => i.Id == producerId);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Delete {producer.FullName}?");

        if (confirm)
        {
            await prodService.DeleteProducer(producerId);
            if (response.Success)
            {
                await OnInitializedAsync();
            }
        }
    }
}
